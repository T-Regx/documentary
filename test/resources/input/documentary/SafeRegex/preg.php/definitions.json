{
  "match": {
    "definition": "Performs a single regular expression match. Retrieves only the first matched occurrence.",
    "return": "`1` if the `pattern` matches given `subject`, `0` if it does not"
  },
  "match_all": {
    "definition": "Performs a global regular expression match",
    "return": "the number of `pattern` matched occurrences (which might be zero)"
  },
  "replace": {
    "definition": "Performs a regular expression search and replace",
    "return": {
      "string": {
        "when": "if `subject` is a `string`",
        "return": "a new string, :with (:unless)"
      },
      "string[]": {
        "when": "if `subject` is an `array`",
        "return": "an array of new strings, all of them :with (:unless)"
      }
    },
    "const": {
      "with": "with replaced occurrences of `pattern`",
      "unless": "unless the `pattern` wasn't matched, in this case the `subject` is returned unchanged"
    }
  },
  "replace_callback": {
    "inherit": "replace",
    "definition": "Performs a regular expression search and replace using a callback"
  },
  "replace_callback_array": {
    "inherit": "filter",
    "definition": "Performs a regular expression search and replace using callbacks"
  },
  "filter": {
    "definition": "Performs a regular expression search and replace",
    "return": {
      "string": {
        "when": "if the `subject` parameter is a `string`",
        "return": "unmodified `subject` if it matches the `pattern`, or `null` if it doesn't"
      },
      "string[]": {
        "when": "if the `subject` parameter is an `array`",
        "return": "an array containing only elements matched by the `pattern`"
      }
    }
  },
  "split": {
    "definition": "Splits string by a regular expression",
    "return": {
      "string[]": {
        "when": "by default",
        "return": "substrings of `subject` split along boundaries matched by `pattern`"
      },
      "array[]": {
        "when": "if flag `PREG_SPLIT_OFFSET_CAPTURE` is used",
        "return": "substrings of `subject` and their offsets"
      }
    }
  },
  "grep": {
    "definition": "Filters array entries that match the pattern",
    "return": "a filtered array indexed using the keys from the `input` array"
  },
  "grep_keys": {
    "definition": "Filters array entries with keys that match the pattern",
    "return": "a filtered array indexed using the keys from the `input` array"
  },
  "quote": {
    "return": "the quoted (escaped) string"
  },
  "last_error": {
    "definition": "Returns the error code of the last `preg_*()` method execution (as int)",
    "return": "error code of the last `preg_*()` method execution"
  },
  "last_error_constant": {
    "definition": "Returns the error name of the last `preg_*()` method execution (as string)",
    "return": "error name of the last `preg_*()` method execution"
  },
  "error_constant": {
    "definition": "Returns the error name for a given error code",
    "return": "error name of a given error code"
  }
}
